using AllTrickOverView.Core;

namespace AllTrickOverView.Examples
{
    public class Example_ProjectWindowItemOnGUI : AExample_Base
    {
        public static TrickOverViewInfo TrickOverViewInfo =
            new TrickOverViewInfo("ProjectWindowItemOnGUI",
                "Project每个条目的容量显示",
                "Project",
                "using System.IO;\nusing System.Reflection;\nusing UnityEngine;\nusing UnityEditor;\n\n[InitializeOnLoad]\npublic static class ShowFileExtensions\n{\n    public static bool ShowFileExtensionsEnable\n    {\n        get { return EditorPrefs.GetBool(\"ShowFileExtensions\", true); }\n        set { EditorPrefs.SetBool(\"ShowFileExtensions\", value); }\n    }\n    \n    [MenuItem(\"Tools/ShowFileExtensions/OpenShowFileExtensions\")]\n    private static void OpenPlaySize()\n    {\n        ShowFileExtensionsEnable = true;\n    }\n\n    [MenuItem(\"Tools/ShowFileExtensions/CloseShowFileExtensions\")]\n    private static void ClosePlaySize()\n    {\n        ShowFileExtensionsEnable = false;\n    }\n    \n    static ShowFileExtensions()\n    {\n        EditorApplication.projectWindowItemOnGUI += ProjectWindowItemOnGUI;\n    }\n    private static void ProjectWindowItemOnGUI(string guid, Rect rect)\n    {\n        if (ShowFileExtensionsEnable && Event.current.alt)\n        {\n            EditorWindow window = GetProjectWindow();            \n           string assetPath = AssetDatabase.GUIDToAssetPath(guid);\n            UnityEngine.Object obj = AssetDatabase.LoadAssetAtPath<UnityEngine.Object>(assetPath);\n\n            if (obj != null && AssetDatabase.IsMainAsset(obj) && !IsDirectory(obj))\n            {\n                if (showsBigIcons)\n                {\n                    // just draw it bold in upper left\n                    string extension = Path.GetExtension(assetPath);\n                    GUI.Label(rect, extension, EditorStyles.boldLabel);\n                }\n                else\n                {\n                    // we overpaint the filename here, does look a bit dirty and might need adjustment of the offset\n                    var labelRect = rect.Translate(new Vector2(19.5f, 0f));\n                    var fileName = Path.GetFileName(assetPath);\n                    GUI.Label(labelRect, fileName);\n                }\n            }\n\n            EditorApplication.RepaintProjectWindow();\n        }\n    }\n\n    // ================================================================================\n    //  getting infos about the project window\n    // --------------------------------------------------------------------------------\n\n    private static bool showsBigIcons\n    {\n        get\n        {\n            return isTwoColumnMode && listAreaGridSize > 16f;\n        }\n    }\n\n    private static bool isTwoColumnMode\n    {\n        get\n        {\n            var projectWindow = GetProjectWindow();\n\n            var projectWindowType = projectWindow.GetType();\n            var modeFieldInfo = projectWindowType.GetField(\"m_ViewMode\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n            int mode = (int)modeFieldInfo.GetValue(projectWindow);\n\n            // 0 == ViewMode.OneColumn\n            // 1 == ViewMode.TwoColum\n\n            return mode == 1;\n        }\n    }\n\n    private static float listAreaGridSize\n    {\n        get\n        {\n            var projectWindow = GetProjectWindow();\n\n            var projectWindowType = projectWindow.GetType();\n            var propertyInfo = projectWindowType.GetProperty(\"listAreaGridSize\", BindingFlags.Instance | BindingFlags.Public);\n            return (float)propertyInfo.GetValue(projectWindow, null);\n        }\n    }\n\n    /// <summary>\n    /// there's a chance here we get the wrong one when two project windows are open\n    /// </summary>\n    private static EditorWindow GetProjectWindow()\n    {\n        if (EditorWindow.focusedWindow != null && EditorWindow.focusedWindow.titleContent.text == \"Project\")\n        {\n            return EditorWindow.focusedWindow;\n        }\n\n        return GetExistingWindowByName(\"Project\");\n    }\n\n    private static EditorWindow GetExistingWindowByName(string name)\n    {\n        EditorWindow[] windows = Resources.FindObjectsOfTypeAll<EditorWindow>();\n        foreach (var item in windows)\n        {\n            if (item.titleContent.text == name)\n            {\n                return item;\n            }\n        }\n\n        return default(EditorWindow);\n    }\n\n    // ================================================================================\n    //  utilities\n    // --------------------------------------------------------------------------------\n\n    private static Rect Translate(this Rect rect, Vector2 delta)\n    {\n        rect.x += delta.x;\n        rect.y += delta.y;\n\n        return rect;\n    }\n\n    private static bool IsDirectory(UnityEngine.Object obj)\n    {\n        if (obj == null)\n        {\n            return false;\n        }\n\n        return obj is DefaultAsset && !AssetDatabase.IsForeignAsset(obj);\n    }\n}",
                "Assets/Editor/Examples/Example_33_ProjectWindowItemOnGUI",
                typeof(Example_ProjectWindowItemOnGUI),
                picPath : "Assets/Editor/Examples/Example_33_ProjectWindowItemOnGUI/QQ截图20210419163741.png",
                videoPath : "");

        public override TrickOverViewInfo GetTrickOverViewInfo()
        {
            return TrickOverViewInfo;
        }
    }
}
