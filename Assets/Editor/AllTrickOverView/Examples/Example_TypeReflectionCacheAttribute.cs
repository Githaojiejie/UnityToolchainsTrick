using AllTrickOverView.Core;

namespace AllTrickOverView.Examples
{
    public class Example_TypeReflectionCacheAttribute : AExample_Base
    {
        public static TrickOverViewInfo TrickOverViewInfo =
            new TrickOverViewInfo("TypeReflectionCacheAttribute",
                "类型反射信息缓存实用工具",
                "Others",
                "using System;\nusing System.Collections.Generic;\nusing System.Reflection;\n\nnamespace CZToolKit.Core\n{\n\n    public static partial class Utility_Refelection\n    {\n        static readonly Dictionary<string, Assembly> AssemblyCache = new Dictionary<string, Assembly>();\n        static readonly Dictionary<string, Type> FullNameTypeCache = new Dictionary<string, Type>();\n        static readonly List<Type> AllTypeCache = new List<Type>();\n        static readonly Dictionary<Type, IEnumerable<Type>> ChildrenTypeCache = new Dictionary<Type, IEnumerable<Type>>();\n\n        static Utility_Refelection()\n        {\n            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())\n            {\n                if (assembly.FullName.StartsWith(\"Unity\")) continue;\n                if (!assembly.FullName.Contains(\"Version=0.0.0\")) continue;\n                AllTypeCache.AddRange(assembly.GetTypes());\n            }\n        }\n\n        public static IEnumerable<Type> GetChildrenTypes<T>()\n        {\n            return GetChildrenTypes(typeof(T));\n        }\n\n        public static IEnumerable<Type> GetChildrenTypes(Type baseType)\n        {\n            if (ChildrenTypeCache.TryGetValue(baseType, out IEnumerable<Type> childrenTypes))\n            {\n                foreach (var item in childrenTypes)\n                {\n                    yield return item;\n                }\n                yield break;\n            }\n\n            ChildrenTypeCache[baseType] = childrenTypes = BuildCache(baseType);\n            foreach (var type in childrenTypes)\n            {\n                yield return type;\n            }\n        }\n\n        private static IEnumerable<Type> BuildCache(Type _baseType)\n        {\n            foreach (var type in AllTypeCache)\n            {\n                if (_baseType.IsAssignableFrom(type))\n                    yield return type;\n            }\n            //var selfAssembly = Assembly.GetAssembly(_baseType);\n            //if (selfAssembly.FullName.StartsWith(\"Assembly-CSharp\") && !selfAssembly.FullName.Contains(\"-firstpass\"))\n            //{\n            //    foreach (var type in selfAssembly.GetTypes())\n            //    {\n            //        if (!type.IsAbstract && _baseType.IsAssignableFrom(type))\n            //        {\n            //            yield return type;\n            //        }\n            //    }\n            //}\n            //else\n            //{\n            //    Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();\n            //    foreach (Assembly assembly in assemblies)\n            //    {\n            //        if (assembly.FullName.StartsWith(\"Unity\")) continue;\n            //        if (!assembly.FullName.Contains(\"Version=0.0.0\")) continue;\n            //        foreach (var type in assembly.GetTypes())\n            //        {\n            //            if (type != null && !type.IsAbstract && _baseType.IsAssignableFrom(type))\n            //                yield return type;\n            //        }\n            //    }\n            //}\n        }\n\n        public static Assembly LoadAssembly(string _assemblyString)\n        {\n            Assembly assembly;\n            if (!AssemblyCache.TryGetValue(_assemblyString, out assembly))\n                AssemblyCache[_assemblyString] = assembly = Assembly.Load(_assemblyString);\n            return assembly;\n        }\n\n        public static Type GetType(string _fullName, string _assemblyString)\n        {\n            Type type;\n            if (FullNameTypeCache.TryGetValue(_fullName, out type))\n                return type;\n            Assembly assembly = LoadAssembly(_assemblyString);\n            if (assembly == null) return null;\n            foreach (var tempType in assembly.GetTypes())\n            {\n                FullNameTypeCache[tempType.FullName] = tempType;\n            }\n            if (FullNameTypeCache.TryGetValue(_fullName, out type))\n                return type;\n            return null;\n        }\n\n        #region GetMemberInfo\n        static Dictionary<Type, List<FieldInfo>> TypeFieldInfoCache = new Dictionary<Type, List<FieldInfo>>();\n\n        /// <summary> 获取字段，包括基类的私有字段 </summary>\n        public static FieldInfo GetFieldInfo(Type _type, string _fieldName)\n        {\n            return GetFieldInfos(_type).Find(f => f.Name == _fieldName);\n        }\n\n        public static List<FieldInfo> GetFieldInfos(Type _type)\n        {\n            if (TypeFieldInfoCache.TryGetValue(_type, out List<FieldInfo> fieldInfos))\n                return fieldInfos;\n            TypeFieldInfoCache[_type] = fieldInfos = new List<FieldInfo>(_type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));\n            // 获取类包含的所有字段(包含私有)\n            while ((_type = _type.BaseType) != null)\n            {\n                fieldInfos.InsertRange(0, _type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));\n            }\n            return fieldInfos;\n        }\n\n        public static IEnumerable<FieldInfo> GetFieldInfos(Type _type, Func<FieldInfo, bool> _patern)\n        {\n            foreach (var field in GetFieldInfos(_type))\n            {\n                if (_patern(field))\n                    yield return field;\n            }\n        }\n\n        /// <summary> 获取方法，包括基类的私有方法 </summary>\n        public static MethodInfo GetMethodInfo(Type _type, string _methodName)\n        {\n            // 如果第一次没有找到，那么这个变量可能是基类的私有字段\n            MethodInfo method = _type.GetMethod(_methodName,\n                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\n            // 只搜索基类的私有方法\n            while (method == null && (_type = _type.BaseType) != null)\n            {\n                method = _type.GetMethod(_methodName, BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly);\n            }\n\n            return method;\n        }\n\n        #endregion\n    }\n}",
                "Assets/Editor/Examples/Example_52_Utility_TypeCache_Attribute",
                typeof(Example_TypeReflectionCacheAttribute),
                picPath : "",
                videoPath : "");

        public override TrickOverViewInfo GetTrickOverViewInfo()
        {
            return TrickOverViewInfo;
        }
    }
}
