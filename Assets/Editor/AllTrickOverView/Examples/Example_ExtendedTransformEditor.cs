using AllTrickOverView.Core;

namespace AllTrickOverView.Examples
{
    public class Example_ExtendedTransformEditor : AExample_Base
    {
        public static TrickOverViewInfo TrickOverViewInfo =
            new TrickOverViewInfo("ExtendedTransformEditor",
                "Transfrom拓展",
                "Transform",
                "using UnityEngine;\nusing UnityEditor;\n\nnamespace Beans.Unity.ETE\n{\n	[CustomEditor (typeof (Transform)), CanEditMultipleObjects]\n	public class ExtendedTransformEditor : Editor\n	{\n		private class Content\n		{\n			public static Texture2D ResetTexture = AssetDatabasex.LoadAssetOfType<Texture2D> (EditorGUIUtility.isProSkin ? \"ETE_Pro_Reset\" : \"ETE_Personal_Reset\");\n\n			public static readonly GUIContent Position	= new GUIContent (\"Position\", \"The local position of this GameObject relative to the parent.\");\n			public static readonly GUIContent Rotation	= new GUIContent (\"Rotation\", \"The local rotation of this Game Object relative to the parent.\");\n			public static readonly GUIContent Scale		= new GUIContent (\"Scale\", \"The local scaling of this GameObject relative to the parent.\");\n			public static readonly GUIContent ResetPosition = new GUIContent (ResetTexture, \"Reset the position.\");\n			public static readonly GUIContent ResetRotation = new GUIContent (ResetTexture, \"Reset the rotation.\");\n			public static readonly GUIContent ResetScale = new GUIContent (ResetTexture, \"Reset the scale.\");\n\n			public const string FloatingPointWarning = \"Due to floating-point precision limitations, it is recommended to bring the world coordinates of the GameObject within a smaller range.\";\n		}\n\n		private class Styles\n		{\n			public static GUIStyle ResetButton;\n\n			static Styles ()\n			{\n				ResetButton = new GUIStyle ()\n				{\n					margin = new RectOffset (0, 0, 2, 0),\n					fixedWidth = 15,\n					fixedHeight = 15\n				};\n			}\n		}\n\n		private class Properties\n		{\n			public SerializedProperty Position;\n			public SerializedProperty Rotation;\n			public SerializedProperty Scale;\n\n			public Properties (SerializedObject obj)\n			{\n				Position	= obj.FindProperty (\"m_LocalPosition\");\n				Rotation	= obj.FindProperty (\"m_LocalRotation\");\n				Scale		= obj.FindProperty (\"m_LocalScale\");\n			}\n		}\n\n		private const int MaxDistanceFromOrigin = 100000;\n		private const int ContentWidth = 60;\n\n		private float xyRatio, xzRatio;\n\n		private Properties properties;\n		private TransformRotationGUI rotationGUI;\n		private Transform transform;\n\n		private void OnEnable ()\n		{\n			properties = new Properties (serializedObject);\n\n			if (rotationGUI == null)\n				rotationGUI = new TransformRotationGUI ();\n			rotationGUI.Initialize (properties.Rotation, Content.Rotation);\n		}\n\n		public override void OnInspectorGUI ()\n		{\n			transform = target as Transform;\n			\n			if (!EditorGUIUtility.wideMode)\n			{\n				EditorGUIUtility.wideMode = true;\n				EditorGUIUtility.labelWidth = EditorGUIUtility.currentViewWidth - 212;\n			}\n\n			serializedObject.UpdateIfRequiredOrScript ();\n\n			using (new EditorGUILayout.HorizontalScope ())\n			{\n				EditorGUILayout.PropertyField (properties.Position, Content.Position);\n				using (new EditorGUI.DisabledGroupScope (properties.Position.vector3Value == Vector3.zero))\n					if (GUILayout.Button (Content.ResetPosition, Styles.ResetButton))\n						properties.Position.vector3Value = Vector3.zero;\n			}\n			using (new EditorGUILayout.HorizontalScope ())\n			{\n				rotationGUI.Draw ();\n				using (new EditorGUI.DisabledGroupScope (rotationGUI.eulerAngles == Vector3.zero))\n					if (GUILayout.Button (Content.ResetRotation, Styles.ResetButton))\n					{\n						rotationGUI.Reset ();\n						if (Tools.current == Tool.Rotate)\n						{\n							if (Tools.pivotRotation == PivotRotation.Global)\n							{\n								Tools.handleRotation = Quaternion.identity;\n								SceneView.RepaintAll ();\n							}\n						}\n					}\n			}\n			using (new EditorGUILayout.HorizontalScope ())\n			{\n				EditorGUILayout.PropertyField (properties.Scale, Content.Scale);\n				using (new EditorGUI.DisabledGroupScope (properties.Scale.vector3Value == Vector3.one))\n					if (GUILayout.Button (Content.ResetScale, Styles.ResetButton))\n						properties.Scale.vector3Value = Vector3.one;\n			}\n\n			// I can hard code this b/c the transform inspector is always drawn in the same spot lmao\n			var dragRect = new Rect (16, 105, EditorGUIUtility.labelWidth - 10, 10);\n\n			var e = Event.current;\n			if (dragRect.Contains (e.mousePosition) && e.type == EventType.MouseDown && e.button == 0)\n			{\n				var currentScale = properties.Scale.vector3Value;\n				xyRatio = currentScale.y / currentScale.x;\n				xzRatio = currentScale.z / currentScale.x;\n			}\n\n			using (var check = new EditorGUI.ChangeCheckScope ())\n			{\n				var c = GUI.color;\n				GUI.color = Color.clear;\n				var newScaleX = CustomFloatField.Draw (new Rect (), dragRect, properties.Scale.vector3Value.x, EditorStyles.numberField);\n\n				if (check.changed)\n				{\n					var currentScale = properties.Scale.vector3Value;\n\n					var delta = newScaleX - properties.Scale.vector3Value.x;\n\n					currentScale.x += delta;\n					currentScale.y += delta * xyRatio;\n					currentScale.z += delta * xzRatio;\n					\n					properties.Scale.vector3Value = currentScale;\n				}\n\n				GUI.color = c;\n			}\n\n			#region Copy\n\n			EditorGUILayout.BeginHorizontal();\n            GUILayout.Label(\"复制坐标：\",GUILayout.Width(60));\n            if (GUILayout.Button(\"X\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosX = transform.position.x;\n                copyData.CopyPosX = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"Y\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosY = transform.position.y;\n                copyData.CopyPosY = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosZ = transform.position.z;\n                copyData.CopyPosZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"X-Y\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosX = transform.position.x;\n                copyData.PosY = transform.position.y;\n                copyData.CopyPosX = true;\n                copyData.CopyPosY = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"X-Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosX = transform.position.x;\n                copyData.PosZ = transform.position.z;\n                copyData.CopyPosX = true;\n                copyData.CopyPosZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"Y-Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosY = transform.position.y;\n                copyData.PosZ = transform.position.z;\n                copyData.CopyPosY = true;\n                copyData.CopyPosZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"X-Y-Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosX = transform.position.x;\n                copyData.PosY = transform.position.y;\n                copyData.PosZ = transform.position.z;\n                copyData.CopyPosX = true;\n                copyData.CopyPosY = true;\n                copyData.CopyPosZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            EditorGUILayout.EndHorizontal();\n\n            EditorGUILayout.BeginHorizontal();\n            GUILayout.Label(\"复制旋转：\",GUILayout.Width(60));\n            if (GUILayout.Button(\"X\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationX = transform.rotation.eulerAngles.x;\n                copyData.CopyRotationX = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"Y\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationY = transform.rotation.eulerAngles.y;\n                copyData.CopyRotationY = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationZ = transform.rotation.eulerAngles.z;\n                copyData.CopyRotationZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"X-Y\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationX = transform.rotation.eulerAngles.x;\n                copyData.RotationY = transform.rotation.eulerAngles.y;\n                copyData.CopyRotationX = true;\n                copyData.CopyRotationY = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"X-Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationX = transform.rotation.eulerAngles.x;\n                copyData.RotationZ = transform.rotation.eulerAngles.z;\n                copyData.CopyRotationX = true;\n                copyData.CopyRotationZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"Y-Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationY = transform.rotation.eulerAngles.y;\n                copyData.RotationZ = transform.rotation.eulerAngles.z;\n                copyData.CopyRotationY = true;\n                copyData.CopyRotationZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"X-Y-Z\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.RotationX = transform.rotation.eulerAngles.x;\n                copyData.RotationY = transform.rotation.eulerAngles.y;\n                copyData.RotationZ = transform.rotation.eulerAngles.z;\n                copyData.CopyRotationX = true;\n                copyData.CopyRotationY = true;\n                copyData.CopyRotationZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            EditorGUILayout.EndHorizontal();\n            \n            EditorGUILayout.BeginHorizontal();\n            if (GUILayout.Button(\"复制坐标和旋转\"))\n            {\n                TextEditor textEd = new TextEditor();\n                TransformCopyData copyData = new TransformCopyData();\n                copyData.PosX = transform.position.x;\n                copyData.PosY = transform.position.y;\n                copyData.PosZ = transform.position.z;\n                copyData.CopyPosX = true;\n                copyData.CopyPosY = true;\n                copyData.CopyPosZ = true;\n                copyData.RotationX = transform.rotation.eulerAngles.x;\n                copyData.RotationY = transform.rotation.eulerAngles.y;\n                copyData.RotationZ = transform.rotation.eulerAngles.z;\n                copyData.CopyRotationX = true;\n                copyData.CopyRotationY = true;\n                copyData.CopyRotationZ = true;\n                textEd.text = copyData.ToString();\n                textEd.OnFocus();\n                textEd.Copy();\n            }\n            if (GUILayout.Button(\"粘贴\"))\n            {\n                TransformCopyData transformCopyData = new TransformCopyData(GUIUtility.systemCopyBuffer);\n                if (transformCopyData != null)\n                {\n                    Transform[] transforms = Selection.transforms;\n                    for (int i = 0; i < transforms.Length; i++)\n                    {\n                        Transform trans = transforms[i];\n                        trans.position = transformCopyData.GetCopyPos(trans.position);\n                        trans.rotation = Quaternion.Euler(transformCopyData.GetCopyRotation(trans.rotation.eulerAngles));\n                    }\n                }\n                EditorUtility.SetDirty(target);\n            }\n            EditorGUILayout.EndHorizontal();\n\n			#endregion\n			\n			serializedObject.ApplyModifiedProperties ();\n\n			EditorGUIUtility.labelWidth = 0;\n\n			var position = transform.position;\n\n			if\n			(\n				Mathf.Abs (position.x) > MaxDistanceFromOrigin ||\n				Mathf.Abs (position.y) > MaxDistanceFromOrigin ||\n				Mathf.Abs (position.z) > MaxDistanceFromOrigin\n			)\n				EditorGUILayout.HelpBox (Content.FloatingPointWarning, MessageType.Warning);\n		}\n\n		[MenuItem (\"CONTEXT/Transform/Set Random Rotation\")]\n		private static void RandomRotation (MenuCommand command)\n		{\n			var transform = command.context as Transform;\n\n			Undo.RecordObject (transform, \"Set Random Rotation\");\n			transform.rotation = Random.rotation;\n		}\n\n		[MenuItem (\"CONTEXT/Transform/Snap to Ground\")]\n		private static void SnapToGround (MenuCommand command)\n		{\n			var transform = command.context as Transform;\n\n			RaycastHit hit;\n			if (Physics.Raycast (transform.position, Vector3.down, out hit))\n			{\n				Undo.RecordObject (transform, \"Snapped To Ground\");\n				transform.position = hit.point;\n			}\n		}\n\n		[MenuItem (\"CONTEXT/Transform/Snap to Ground (Physics)\", true)]\n		private static bool ValidateSnapToGroundPhysics (MenuCommand command)\n		{\n			return ((Transform)command.context).GetComponent<Collider> () != null;\n		}\n	}\n}",
                "Assets/Editor/Examples/Example_31_ExtendedTransformEditor",
                typeof(Example_ExtendedTransformEditor),
                picPath : "Assets/Editor/Examples/Example_31_ExtendedTransformEditor/QQ截图20210419162404.png",
                videoPath : "");

        public override TrickOverViewInfo GetTrickOverViewInfo()
        {
            return TrickOverViewInfo;
        }
    }
}
