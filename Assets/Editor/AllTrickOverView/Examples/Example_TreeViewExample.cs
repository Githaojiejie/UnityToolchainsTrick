using AllTrickOverView.Core;

namespace AllTrickOverView.Examples
{
    public class Example_TreeViewExample : AExample_Base
    {
        public static TrickOverViewInfo TrickOverViewInfo =
            new TrickOverViewInfo("TreeViewExample",
                "TreeViewExample，Treeview示例代码",
                "Others",
                "using UnityEditor.IMGUI.Controls;\nusing UnityEngine;\n\n\nnamespace UnityEditor.TreeViewExamples\n{\n\n	internal class CustomHeightTreeView : TreeViewWithTreeModel<MyTreeElement>\n	{\n		static class Styles\n		{\n			public static GUIStyle background = \"RL Background\";\n			public static GUIStyle headerBackground = \"RL Header\";\n		}\n		\n		public CustomHeightTreeView(TreeViewState state, TreeModel<MyTreeElement> model)\n			: base(state, model)\n		{\n			// Custom setup\n			showBorder = true;\n			customFoldoutYOffset = 3f;\n\n			Reload();\n		}\n\n		protected override float GetCustomRowHeight (int row, TreeViewItem item)\n		{\n			var myItem = (TreeViewItem<MyTreeElement>)item;\n			\n			if (myItem.data.enabled)\n				return 85f;\n			\n			return 30f;\n		}\n\n		public override void OnGUI (Rect rect)\n		{\n			// Background\n			if (Event.current.type == EventType.Repaint)\n				DefaultStyles.backgroundOdd.Draw(rect, false, false, false, false);\n\n			// TreeView\n			base.OnGUI (rect);\n		}\n\n		protected override void RowGUI (RowGUIArgs args)\n		{\n			var item = (TreeViewItem<MyTreeElement>) args.item;\n			var contentIndent = GetContentIndent (item);\n\n			// Background\n			var bgRect = args.rowRect;\n			bgRect.x = contentIndent;\n			bgRect.width = Mathf.Max (bgRect.width - contentIndent, 155f) - 5f;\n			bgRect.yMin += 2f;\n			bgRect.yMax -= 2f;\n			DrawItemBackground(bgRect);\n\n			// Custom label\n			var headerRect = bgRect;\n			headerRect.xMin += 5f;\n			headerRect.xMax -= 10f;\n			headerRect.height = Styles.headerBackground.fixedHeight;\n			HeaderGUI (headerRect, args.label, item);\n\n			// Controls\n			var controlsRect = headerRect;\n			controlsRect.xMin += 20f;\n			controlsRect.y += headerRect.height;\n			if (item.data.enabled)\n				ControlsGUI (controlsRect, item);\n		}\n\n		void DrawItemBackground (Rect bgRect)\n		{\n			if (Event.current.type == EventType.Repaint)\n			{\n				var rect = bgRect;\n				rect.height = Styles.headerBackground.fixedHeight;\n				Styles.headerBackground.Draw(rect, false, false, false, false);\n\n				rect.y += rect.height;\n				rect.height = bgRect.height - rect.height;\n				Styles.background.Draw(rect, false, false, false, false);\n			}\n		}\n\n		void HeaderGUI (Rect headerRect, string label, TreeViewItem<MyTreeElement> item)\n		{\n			headerRect.y += 1f;\n\n			// Do toggle\n			Rect toggleRect = headerRect;\n			toggleRect.width = 16;\n			EditorGUI.BeginChangeCheck ();\n			item.data.enabled = EditorGUI.Toggle(toggleRect, item.data.enabled); // hide when outside cell rect\n			if (EditorGUI.EndChangeCheck ())\n				RefreshCustomRowHeights ();\n\n			Rect labelRect = headerRect;\n			labelRect.xMin += toggleRect.width + 2f;\n			GUI.Label (labelRect, label);\n		}\n\n		void ControlsGUI(Rect controlsRect, TreeViewItem<MyTreeElement> item)\n		{\n			var rect = controlsRect;\n			rect.y += 3f;\n			rect.height = EditorGUIUtility.singleLineHeight;\n			item.data.floatValue1 = EditorGUI.Slider(rect, GUIContent.none, item.data.floatValue1, 0f, 1f);\n			rect.y += rect.height + EditorGUIUtility.standardVerticalSpacing;\n			item.data.material = (Material)EditorGUI.ObjectField(rect, GUIContent.none, item.data.material, typeof(Material), false);\n			rect.y += rect.height + EditorGUIUtility.standardVerticalSpacing;\n			item.data.text = GUI.TextField(rect, item.data.text);\n		}\n\n		protected override Rect GetRenameRect (Rect rowRect, int row, TreeViewItem item)\n		{\n			// Match label perfectly\n			var renameRect = base.GetRenameRect (rowRect, row, item);\n			renameRect.xMin += 25f;\n			renameRect.y += 2f;\n			return renameRect;\n		}\n\n		// Rename\n		//--------\n\n		protected override bool CanRename(TreeViewItem item)\n		{\n			// Only allow rename if we can show the rename overlay with a certain width (label might be clipped by other columns)\n			Rect renameRect = GetRenameRect (treeViewRect, 0, item);\n			return renameRect.width > 30;\n		}\n\n		protected override void RenameEnded(RenameEndedArgs args)\n		{\n			// Set the backend name and reload the tree to reflect the new model\n			if (args.acceptedRename)\n			{\n				var element = treeModel.Find(args.itemID);\n				element.name = args.newName;\n				Reload();\n			}\n		}\n	}\n}\n",
                "Assets/Editor/Examples/Example_68_TreeViewExamples",
                typeof(Example_TreeViewExample),
                picPath : "Assets/Editor/Examples/Example_68_TreeViewExamples/preview.png",
                videoPath : "");

        public override TrickOverViewInfo GetTrickOverViewInfo()
        {
            return TrickOverViewInfo;
        }
    }
}
